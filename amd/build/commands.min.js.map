{"version":3,"file":"commands.min.js","sources":["../src/commands.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Commands helper for the Moodle tiny_aic plugin.\n *\n * @module      tiny_aic/commands\n * @copyright   2025 DeveloperCK <developerck@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport $ from \"jquery\";\nimport { get_string, get_strings } from \"core/str\";\nimport { getButtonImage } from \"editor_tiny/utils\";\nimport { component, buttonName, icon } from \"tiny_aic/common\";\nimport Ajax from \"core/ajax\";\nimport * as Options from \"./options\";\n/**\n * Get the setup function for the buttons.\n *\n * This is performed in an async function which ultimately returns the registration function as the\n * Tiny.AddOnManager.Add() function does not support async functions.\n *\n * @returns {function} The registration function to call within the Plugin.add function.\n */\nexport const getSetup = async () => {\n  const [buttonTitle, buttonImage, dialogStrings] = await Promise.all([\n    get_string(\"button_title\", component),\n    getButtonImage(\"icon\", component),\n    get_strings([\n      { key: \"header\", component },\n      { key: \"help\", component },\n      { key: \"generate\", component },\n      { key: \"cancel\", component },\n      { key: \"aicplaceholder\", component },\n      { key: \"emptyrule\", component },\n      { key: \"lengthrule\", component },\n      { key: \"thinking\", component },\n    ]),\n  ]);\n\n  return (editor) => {\n    if (Options.isAllowed(editor)) {\n      // Register the Moodle SVG as an icon suitable for use as a TinyMCE toolbar button.\n      editor.ui.registry.addIcon(icon, buttonImage.html);\n\n      // Register the startdemo Toolbar Button.\n      editor.ui.registry.addButton(buttonName, {\n        icon,\n        tooltip: buttonTitle,\n        onAction: () => handleAction(editor, dialogStrings),\n      });\n    }\n  };\n};\n\n/**\n * Handle the action for your plugin.\n * @param {TinyMCE.editor} editor The tinyMCE editor instance.\n * @param {dialogStrings} dialogStrings\n */\nconst handleAction = (editor, dialogStrings) => {\n  editor.windowManager.open({\n    title: dialogStrings[0],\n    size: \"medium\",\n    body: {\n      type: \"panel\",\n      items: [\n        {\n          type: \"textarea\",\n          name: \"prompt\",\n          label: dialogStrings[1],\n          placeholder: dialogStrings[4],\n          multiline: true,\n        },\n        {\n          type: \"htmlpanel\",\n          html: '<div id=\"' + editor.id + '_aic\" style=\"height: 100%;\"></div>',\n        },\n      ],\n    },\n    buttons: [\n      {\n        type: \"submit\",\n        name: \"generate\",\n        text: dialogStrings[2],\n        buttonType: \"primary\",\n      },\n      {\n        type: \"cancel\",\n        name: \"cancel\",\n        text: dialogStrings[3],\n      },\n    ],\n\n    onSubmit: async (api) => {\n      const data = api.getData();\n      const prompt = data.prompt;\n      const aiOutputPanel = $(\"#\" + editor.id + \"_aic\");\n      const styleId = \"aic-card-styles\";\n      if (!document.getElementById(styleId)) {\n        const style = document.createElement(\"style\");\n        style.id = styleId;\n        style.textContent = `\n      /* Card container */\n.tox .tox-dialog__body-content .card {\n  border: 1px solid #dee2e6;\n  border-radius: 0.375rem;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);\n  background-color: #fff;\n  margin-bottom: 1rem;\n  font-family: system-ui, sans-serif;\n}\n\n/* Card header */\n.tox .tox-dialog__body-content .card-header {\n  background-color: #f8f9fa;\n  padding: 0.75rem 1rem;\n  border-bottom: 1px solid #dee2e6;\n  font-size: 1.25rem;\n  font-weight: 500;\n  border-top-left-radius: 0.375rem;\n  border-top-right-radius: 0.375rem;\n}\n\n/* Card body */\n.tox .tox-dialog__body-content .card-body {\n  padding: 1rem;\n}\n\n/* Card text */\n.tox .tox-dialog__body-content .card-text {\n  margin-bottom: 1rem;\n  font-size: 1rem;\n  color: #212529;\n}\n\n.tox .alert-danger {\n  background-color: #f8d7da;\n  color: #842029;\n  border: 1px solid #f5c2c7;\n  padding: 0.75rem 1.25rem;\n  margin-bottom: 1rem;\n  border-radius: 0.375rem;\n  font-size: 1rem;\n  font-family: system-ui, sans-serif;\n}\n  .tox .alert-warning {\n  background-color: #fff3cd;\n  color: #664d03;\n  border: 1px solid #ffecb5;\n  padding: 0.75rem 1.25rem;\n  margin-bottom: 1rem;\n  border-radius: 0.375rem;\n  font-size: 1rem;\n  font-family: system-ui, sans-serif;\n}\n   .tox .alert-info {\n  background-color:rgb(205, 239, 255);\n  color: #664d03;\n  border: 1px solid rgb(205, 239, 255);\n  padding: 0.75rem 1.25rem;\n  margin-bottom: 1rem;\n  border-radius: 0.375rem;\n  font-size: 1rem;\n  font-family: system-ui, sans-serif;\n}\n    `;\n        document.head.appendChild(style);\n      }\n      if (!prompt || prompt.trim() === \"\") {\n        $(aiOutputPanel).html(\n          \"<div class ='alert alert-danger'>\"+dialogStrings[5]+\"</div>\"\n        );\n        return;\n      }\n      if (prompt.length < 3 || prompt.length > 1000) {\n        // Show a loading indicator (optional but good UX)\n        $(aiOutputPanel).html(\n          \"<div class ='alert alert-danger'>\"+dialogStrings[6]+\"</div>\"\n        );\n      }\n      try {\n         $(aiOutputPanel).html(\n          \"<div class ='alert alert-info'>\"+dialogStrings[7]+\"</div>\"\n        );\n        Ajax.call([\n          {\n            methodname: \"tiny_aic_get_generated_text\", // Define this method in your ajax.php\n            args: {\n              prompt: prompt,\n            },\n          },\n        ])[0]\n          .done(function (response) {\n            $(aiOutputPanel).html(\"\");\n            if (response.error) {\n              // Handle the error response from the AI service.\n              throw new Error(dialogStrings[4]);\n            } else {\n              // Insert the generated text into the editor.\n\n              aiOutputPanel.html(response.generatedtext);\n              $(\"#inserttext_tiny_aic\").on(\"click\", () => {\n                // Extract the text from the corresponding .response div\n                response = $(\"#aiccontent\").text();\n                if (response && editor) {\n                  editor.insertContent(response);\n                  // Optionally, close the dialog after inserting content\n                  api.close();\n                }\n              });\n            }\n          })\n          .fail(function (err) {\n            $(aiOutputPanel).html(\n              '<div class=\"alert alert-danger\" role=\"alert\">' +\n                err.message +\n                \"</div>\"\n            );\n          });\n      } catch (error) {\n        $(aiOutputPanel).html(\n          '<div class=\"alert alert-danger\" role=\"alert\">' +\n            error.message +\n            \"</div>\"\n        );\n      }\n    },\n  });\n};\n"],"names":["async","buttonTitle","buttonImage","dialogStrings","Promise","all","component","key","editor","Options","isAllowed","ui","registry","addIcon","icon","html","addButton","buttonName","tooltip","onAction","handleAction","windowManager","open","title","size","body","type","items","name","label","placeholder","multiline","id","buttons","text","buttonType","onSubmit","prompt","api","getData","aiOutputPanel","document","getElementById","style","createElement","textContent","head","appendChild","trim","length","call","methodname","args","done","response","error","Error","generatedtext","on","insertContent","close","fail","err","message"],"mappings":";;;;;;;k1BAoCwBA,gBACfC,YAAaC,YAAaC,qBAAuBC,QAAQC,IAAI,EAClE,mBAAW,eAAgBC,oBAC3B,yBAAe,OAAQA,oBACvB,oBAAY,CACV,CAAEC,IAAK,SAAUD,UAAAA,mBACjB,CAAEC,IAAK,OAAQD,UAAAA,mBACf,CAAEC,IAAK,WAAYD,UAAAA,mBACnB,CAAEC,IAAK,SAAUD,UAAAA,mBACjB,CAAEC,IAAK,iBAAkBD,UAAAA,mBACzB,CAAEC,IAAK,YAAaD,UAAAA,mBACpB,CAAEC,IAAK,aAAcD,UAAAA,mBACrB,CAAEC,IAAK,WAAYD,UAAAA,8BAIfE,SACFC,QAAQC,UAAUF,UAEpBA,OAAOG,GAAGC,SAASC,QAAQC,aAAMZ,YAAYa,MAG7CP,OAAOG,GAAGC,SAASI,UAAUC,mBAAY,CACvCH,KAAAA,aACAI,QAASjB,YACTkB,SAAU,IAAMC,aAAaZ,OAAQL,0BAWvCiB,aAAe,CAACZ,OAAQL,iBAC5BK,OAAOa,cAAcC,KAAK,CACxBC,MAAOpB,cAAc,GACrBqB,KAAM,SACNC,KAAM,CACJC,KAAM,QACNC,MAAO,CACL,CACED,KAAM,WACNE,KAAM,SACNC,MAAO1B,cAAc,GACrB2B,YAAa3B,cAAc,GAC3B4B,WAAW,GAEb,CACEL,KAAM,YACNX,KAAM,YAAcP,OAAOwB,GAAK,wCAItCC,QAAS,CACP,CACEP,KAAM,SACNE,KAAM,WACNM,KAAM/B,cAAc,GACpBgC,WAAY,WAEd,CACET,KAAM,SACNE,KAAM,SACNM,KAAM/B,cAAc,KAIxBiC,SAAUpC,MAAAA,YAEFqC,OADOC,IAAIC,UACGF,OACdG,eAAgB,mBAAE,IAAMhC,OAAOwB,GAAK,YAErCS,SAASC,eADE,mBACuB,OAC/BC,MAAQF,SAASG,cAAc,SACrCD,MAAMX,GAHQ,kBAIdW,MAAME,ugDAiENJ,SAASK,KAAKC,YAAYJ,UAEvBN,QAA4B,KAAlBA,OAAOW,SAMlBX,OAAOY,OAAS,GAAKZ,OAAOY,OAAS,0BAErCT,eAAezB,KACf,oCAAoCZ,cAAc,GAAG,kCAIpDqC,eAAezB,KAChB,kCAAkCZ,cAAc,GAAG,wBAEhD+C,KAAK,CACR,CACEC,WAAY,8BACZC,KAAM,CACJf,OAAQA,WAGX,GACAgB,MAAK,SAAUC,iCACZd,eAAezB,KAAK,IAClBuC,SAASC,YAEL,IAAIC,MAAMrD,cAAc,IAI9BqC,cAAczB,KAAKuC,SAASG,mCAC1B,wBAAwBC,GAAG,SAAS,MAEpCJ,UAAW,mBAAE,eAAepB,SACZ1B,SACdA,OAAOmD,cAAcL,UAErBhB,IAAIsB,eAKXC,MAAK,SAAUC,yBACZtB,eAAezB,KACf,gDACE+C,IAAIC,QACJ,aAGR,MAAOR,2BACLf,eAAezB,KACf,gDACEwC,MAAMQ,QACN,mCAtDFvB,eAAezB,KACf,oCAAoCZ,cAAc,GAAG"}